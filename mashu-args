#!/bin/bash
LOGLEVEL="${LOGLEVEL:-error}"
function render {
	ffmpeg -loglevel "$LOGLEVEL" \
		-analyzeduration 2147483647 \
		-probesize 2147483647 \
		"$@" </dev/null
	return "$?"
}

# inputs
acodec=""
audioPath=""
let audioTrack=0
let bitrate=0
endTime="0.0"
format=""
let fps=0
let gopsize=0
let height=0
imagePath=""
output=""
let samplerate=0
stamp=""
stampColor=""
stampFont=""
stampSize=""
startTime="0.0"
subtitlePath=""
let subtitleTrack=0
vcodec=""
vfilter=""
videoPath=""
let videoTrack=0
let width=0

# read inputs
while [[ $# -gt 0 ]]; do
	arg="$1"; shift
	if [[ "$arg" == "--" ]]; then
		break
	fi

	case "$arg" in
		-acodec)
			if ! [[ "$1" =~ ^(AAC|FLAC)$ ]]; then
				echo "$0: acodec must be AAC or FLAC (not '$1')" 1>&2
				exit 1
			fi
			acodec="$1"; shift
			;;
		-audio)
			if [[ ! -s "$1" ]]; then
				echo "$0: audio source does not exist or is empty ('$1')" 1>&2
				exit 1
			fi
			audioPath="$1"; shift

			if ! [[ "$1" =~ ^[0-9]+$ ]]; then
				echo "$0: audio track must be an integer (not '$1')" 1>&2
				exit 1
			fi
			let audioTrack="$1"; shift
			;;
		-bitrate)
			if ! [[ "$1" =~ ^[0-9]+$ ]]; then
				echo "$0: bitrate must be an integer (not '$1')" 1>&2
				exit 1
			fi
			let bitrate="$1"; shift
			;;
		-end)
			if ! [[ "$1" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
				echo "$0: end time must be numeric seconds (not '$1')" 1>&2
				exit 1
			fi
			endTime="$1"; shift
			;;
		-format)
			if ! [[ "$1" =~ ^(MKV)$ ]]; then
				echo "$0: format must be MKV (not '$1')" 1>&2
				exit 1
			fi
			format="$1"; shift
			;;
		-fps)
			if ! [[ "$1" =~ ^[0-9]+$ ]]; then
				echo "$0: fps must be an integer (not '$1')" 1>&2
				exit 1
			fi
			let fps="$1"; shift
			;;
		-gopsize)
			if ! [[ "$1" =~ ^[0-9]+$ ]]; then
				echo "$0: gopsize must be an integer (not '$1')" 1>&2
				exit 1
			fi
			let gopsize="$1"; shift
			;;
		-height)
			if ! [[ "$1" =~ ^[0-9]+$ ]]; then
				echo "$0: height must be an integer (not '$1')" 1>&2
				exit 1
			fi
			let height="$1"; shift
			;;
		-image)
			if [[ ! -s "$1" ]]; then
				echo "$0: image source does not exist or is empty ('$1')" 1>&2
				exit 1
			fi
			imagePath="$1"; shift
			;;
		-output)
			if [[ -s "$1" ]]; then
				echo "$0: output already exists ('$1')" 1>&2
				exit 1
			fi
			output="$1"; shift
			;;
		-samplerate)
			if ! [[ "$1" =~ ^[0-9]+$ ]]; then
				echo "$0: samplerate must be an integer (not '$1')" 1>&2
				exit 1
			fi
			let samplerate="$1"; shift
			;;
		-stamp)
			if [[ -z "$1" ]]; then
				echo "$0: stamp text empty" 1>&2
				exit 1
			fi
			stamp="$1"; shift

			if [[ -z "$1" ]]; then
				echo "$0: stamp color empty" 1>&2
				exit 1
			fi
			stampColor="$1"; shift

			if [[ ! -s "$1" ]]; then
				echo "$0: stamp font does not exist or is empty ('$1')" 1>&2
				exit 1
			fi
			stampFont="$1"; shift

			if [[ -z "$1" ]]; then
				echo "$0: stamp size empty" 1>&2
				exit 1
			fi
			stampSize="$1"; shift
			;;
		-start)
			if ! [[ "$1" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
				echo "$0: start time must be numeric seconds (not '$1')" 1>&2
				exit 1
			fi
			startTime="$1"; shift
			;;
		-subtitle)
			if [[ ! -s "$1" ]]; then
				echo "$0: subtitle source does not exist or is empty ('$1')" 1>&2
				exit 1
			fi
			subtitlePath="$1"; shift

			if ! [[ "$1" =~ ^[0-9]+$ ]]; then
				echo "$0: subtitle track must be an integer (not '$1')" 1>&2
				exit 1
			fi
			let subtitleTrack="$1"; shift
			;;
		-vcodec)
			if ! [[ "$1" =~ ^(H264)$ ]]; then
				echo "$0: vcodec must be H264 (not '$1')" 1>&2
				exit 1
			fi
			vcodec="$1"; shift
			;;
		-vfilter)
			if [[ -z "$1" ]]; then
				echo "$0: vfilter must not be empty when specified" 1>&2
				exit 1
			fi
			vfilter="$1"; shift
			;;
		-video)
			if [[ ! -s "$1" ]]; then
				echo "$0: video source does not exist or is empty ('$1')" 1>&2
				exit 1
			fi
			videoPath="$1"; shift

			if ! [[ "$1" =~ ^[0-9]+$ ]]; then
				echo "$0: video track must be an integer (not '$1')" 1>&2
				exit 1
			fi
			let videoTrack="$1"; shift
			;;
		-width)
			if ! [[ "$1" =~ ^[0-9]+$ ]]; then
				echo "$0: width must be an integer (not '$1')" 1>&2
				exit 1
			fi
			let width="$1"; shift
			;;
	esac
done
